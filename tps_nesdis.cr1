'CR1000 Series Datalogger
'To create a different opening program template, type in new
'instructions and select Template | Save as Default Template
'date:
'program author:

'Declare Public Variables


' Wiring:
' TPS-3100 Sensor
'Wire      Purpose         Datalogger
'____________________________________
' Pin 2    RS232 TPS RX    C7         (white)
' Pin 3    RS232 TPS TX    C8         (red)
' Pin 5    RS232 G         G          (black, green)

' C7 -- TPS3100 RX, Red
' C8 -- TPS3100 TX, White


Public TPS_out_format As String *3
Public TPS_timestamp As String * 10
Public TPS_Fault_Ind As String * 7
Public TPS_cur_precip As Float
Public TPS_accum_precip As Float
Public TPS_AT As Float
Public TPS_Inst_Temp As Float
Public TPS_WS As Float
Public TPS_CRC As String *4
Public callstring As String * 3
Public TPS_String As String * 200
Public LoggerTemp_C As Float
Public BattVolts_V As Float

'\\\\\\\\\\\\\\\\\\\\\\\\ OUTPUT SECTION ////////////////////////

DataTable(TableTPSplus,true,-1)
  DataInterval(0,1,Min,0)
  Sample(1, TPS_out_format, FP2)
  Sample(1, TPS_timestamp, String)
  Sample(1, TPS_Fault_Ind, String)
  Sample(1, TPS_cur_precip,FP2)
  Sample(1, TPS_accum_precip,FP2)
  Sample(1, TPS_AT, FP2)
  Sample(1, TPS_Inst_Temp, FP2)
  Sample(1, TPS_WS, FP2)
  Sample(1, TPS_CRC, String)

EndTable

DataTable(HourlyDiag,true,-1)
  DataInterval(0,60,Min,10)
  Sample(1, LoggerTemp_C,FP2)
  Average(1,LoggerTemp_C,FP2,False)
  Sample(1,BattVolts_V,FP2)
  Average(1,BattVolts_V,FP2,False)
  Maximum(1,BattVolts_V,FP2,False,False)
  Minimum(1,BattVolts_V,FP2,False,False)
  
EndTable
  

'\\\\\\\\\\\\\\\\\\\\\\\\\\\ PROGRAM ////////////////////////////

BeginProg
  Scan( 1,Min, 3, 0)
    SequentialMode
  
    '''''''''''''''''''''''''''''''''''''''''
    ''' Measure TPS '''''''''''''''''''''''''
    '''''''''''''''''''''''''''''''''''''''''
     callstring  = CHR (13 )  & CHR (13 )  &  "T" & CHR (13 ) 
    ' 1) open the serial port
    SerialOpen (Com4,9600,0,300,10000)
    ' 2) flush the port
    SerialFlush (Com4)
    ' 3) Send the transmit code and put the response into variable TPS_String
    SerialOut (Com4,callstring,"",3,0)
    SerialIn (TPS_String,Com4,100,-1,100)
    ' 4) Close the serial port
    SerialClose (Com4)
    ' 5) Comma separate the string from the TPS
    'SplitStr (TPS_Array1(),TPS_String,",",8,2)
    ' 6) Space separate the first bit o' data
    'SplitStr (TPS_Array2(),TPS_Array1(1)," ",2,2)
    ' 7) Star separate the last bit o' data
    'SplitStr (TPS_Array3(),TPS_Array1(8),"*",2,2)
    TPS_out_format = Mid (TPS_String,3,3)
    TPS_timestamp = Mid(TPS_String,7,10)
    TPS_Fault_Ind = Mid(TPS_String,18,7)
    TPS_cur_precip = Mid(TPS_String,26,5)
    TPS_accum_precip = Mid(TPS_String,32,8)
    TPS_AT = Mid(TPS_String,41,5)
    TPS_Inst_Temp = Mid(TPS_String,47,5)
    TPS_WS = Mid(TPS_String,53,4)
    TPS_CRC = Mid(TPS_STring,58,4)

    Battery (BattVolts_V)
    PanelTemp (LoggerTemp_C,250)
    
' TPS Aliases
'Alias TPS_Array2(2) = TPS_out_format
'Alias TPS_Array1(2) = TPS_timestamp
'Alias TPS_Array1(3) = TPS_Fault_Ind
'Alias TPS_Array1(4) = TPS_cur_precip
'Alias TPS_Array1(5) = TPS_accum_precip
'Alias TPS_Array1(6) = TPS_AT
'Alias TPS_Array1(7) = TPS_Inst_Temp
'Alias TPS_Array3(1) = TPS_WS
'Alias TPS_Array3(2) = TPS_CRC


    '------------------------------------------------
    'Log sensor output once an hour
    CallTable TableTPSplus
    CallTable HourlyDiag
  NextScan
EndProg
